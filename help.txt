/*

Arafat Rahaman
shell Project
help.txt

*/


================================================================================================================================================================================================================================================================================

    pwd : prints the name of the current work directory

    cd [absolute_path_name | relative_path_name] :  changes the current work directory

    help : prints this help guide

    exit : exits this shell program

    wait : halts shell program if any child is running in the background.

    command [optional args] [optional &] : this utilizes check_for_path (char *name) function in the helper.c file. When a potential executable command is passed to the shell, it looks for a path to that file, 
    and executes it if its in any of the PATH variable files. Prints to the screen. No redirection. If ampersand was last argument process is run in the backgorund.

    command [optional args] > OUTPUT_FILE.txt [optional &]: When a potential executable command is passed to the shell, it looks for a path to that file, and executes it if its in any of the PATH variable files. 
    It then looks for the the outputFile in the CWD, if not found then it creates it. Asks for you to try again. If it is found then uses dup2() to redirect the output of the exectuable 
    to the outputFile. It uses execv() to then execute the executable file. If the executable file wasn't found then it fails. If ampersand was last argument process is run in the backgorund.

    command [optional args] < INPUT_FILE.txt [optional &]: When a potential executable command is passed to the shell, it looks for a path to that file, and executes it if its in any of the PATH variable files. 
    It then looks for the the inputFile in the CWD, if not found then fails. Asks for you to try again. If it is found then uses dup2() to redirect the input of the exectuable to the inputFIle. 
    It uses execv() to then execute the executable file. If the executable file wasn't found then it fails. If ampersand was last argument process is run in the backgorund.

    command [optional args] < INPUT_FILE.txt > OUTPUT_FILE.txt [optional &]: When a potential executable command is passed to the shell, it looks for a path to that file, and executes it if its in any of the PATH variable 
    files. It then looks for the the outputFile in the CWD, if not found then it creates it. Asks for you to try again. If it is found then uses dup2() to redirect the output of the exectuable 
    to the outputFile. It then looks for the the inputFile in the CWD, if not found then fails. Asks for you to try again. If it is found then uses dup2() to redirect the input of the exectuable to 
    the inputFIle.It uses execv() to then execute the executable file. If the executable file wasn't found then it fails. If ampersand was last argument process is run in the backgorund.

    command [optional args] > OUTPUT_FILE.txt < INPUT_FILE.txt [optional &]: When a potential executable command is passed to the shell, it looks for a path to that file, and executes it if its in any of the PATH variable 
    files. It then looks for the the outputFile in the CWD, if not found then it creates it. Asks for you to try again. If it is found then uses dup2() to redirect the output of the exectuable 
    to the outputFile. It then looks for the the inputFile in the CWD, if not found then fails. Asks for you to try again. If it is found then uses dup2() to redirect the input of the exectuable to 
    the inputFIle.It uses execv() to then execute the executable file. If the executable file wasn't found then it fails. If ampersand was last argument process is run in the backgorund.

    command [optional args] | ... | command [optional args] [optional &]: Multiple pipings are handed in this porgram.  If ampersand was last argument process is run in the backgorund.
    For more information here is a snipet from the shell's documentation. 
    Documentation - [One or more "|" and with executables and arguments for those executables betweeen each "|" (pipe) - All these cases are part of an if else statement 
    logic gates, and at this point, it is true that the parser can only get to | without any redirects. If there was a redirect it would fail to get to pipes. And for any other thing the program would not recognize it. 
    This program utilizes pipes. It has the max potenital of 1024 pipes, or 1025 process. This numnber was given by the TA. This function first creates many pipes as forementioned. It then figures out the number of 
    process, which will be used to figure out how many times the for-loop is going to be used. It uses the total int varaible to keep track of the index of pipes and comName to figure out the location of the the next 
    executable name. pipeIndex is used to turn the | into NULL. Essentially each time we fork and exec, comName is used as the execv first arg, and then from that point and forward is arg2 which is the arguemnts for the 
    exectable. Becuase (if there is pipe) the pipe is turned into NULL, it will execv arg2 up until that NULL-pipe. So now to the for-loop. The for loop runs for each process. For the first proc one the std-out is redirected
    to the fd[0][1], and for all subsequent process this is done, but also the stdin put is redirected to fd[0][0]. The fd's are file descriptors and a 2D array is used. essentially the first process writes to the write end 
    of the first pipe, and subsequent pipe reads from the read end of the same pipe. In the for loop i is used to keep track of the 2D array pipe index. After redircting. and this is done everytime, all fd's are closed. 
    And the program execs. If there is more programs it runs again, and again until the end.] 

================================================================================================================================================================================================================================================================================

